// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  name              String
  lastLogin         String?
  isVerified        Boolean   @default(false)
  password          String
  userRole          Roles     @default(simple)
}

model Token {
  id                      String    @id @map("_id") @default(auto()) @db.ObjectId
  token                   String
  email                   String
  userId                  String
  tokenExpires            DateTime
  tokenType               TokenType
}


model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  category   String
  stage      Int
  status     String
  location   String?
  tags       String[]
  updatedAt  DateTime @default(now())
}

model task {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  email         String  
  description   String 
  name          String
  status        String
  updatedAt     DateTime @default(now())
}

model robot {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  location   locationType? @default(init)
  charge     String  @default("70%")
  updatedAt  DateTime @default(now())
}

model slot {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  productId  String
  stage      Int
  zone       locationType
  updatedAt  DateTime @default(now())
}

enum locationType {
  init
  A1
  A2
  A3
  A4
}

enum Shelves {
  A1
  A2
  A3
  A4
}


model Insight {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   
  title       String
  description String
  category    String
  impact      String
  createdAt   DateTime @default(now())
}

model Notifier {
  id                      String   @id @map("_id") @default(auto()) @db.ObjectId
  userId                  String   
  email                   String   
  notify                  DateTime @default(now())
  notifyType              NotificationType @default(alert)
}

enum NotificationType {
  email_validation
  password_reset
  alert
  mission_completed
  mission_incomplete
}

enum TokenType {
  email_validation
  password_reset
  access
  refresh
}

enum Roles {
  simple
  supervisor
}